
Leetcode - https://leetcode.com/problems/number-of-islands/

1) BFS - 

class Solution {
public:   
    void bfs(int r, int c, vector<vector<int>>& vis, vector<vector<char>> grid)
    {
        int n=grid.size();
        int m=grid[0].size();
        vis[r][c]=1;
        queue<pair<int,int>> q;
        q.push({r,c});
        while(!q.empty())
        {
            r = q.front().first;
            c = q.front().second;
            q.pop();
            for(int i=-1;i<=1;i++)
            {
                for(int j=-1;j<=1;j++)
                {
                    if(abs(i)==abs(j)){continue;}
                    int newr = r + i;
                    int newc = c + j;
                    if(newr>=0 && newr<n && newc>=0 && newc<m && 
                       grid[newr][newc]=='1' && vis[newr][newc]==0)
                    {
                        q.push({newr,newc});
                        vis[newr][newc]=1;
                    }
                }
            }
        }
    }
    
    int numIslands(vector<vector<char>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
        vector<vector<int>> vis(n, vector<int> (m,0));
        int ans=0;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(grid[i][j]=='1' && vis[i][j]==0)
                {
                    ans++;
                    bfs(i,j,vis,grid);
                }
            }
        }
      return ans;  
    }
};

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

2) DFS - 

 class Solution {
public:   
    void dfs(int r, int c, vector<vector<char>>& grid)
    {
        if(r<0 || c<0 || r>=grid.size() || c>=grid[0].size() || grid[r][c]=='0')
        {
            return ;
        }      
        grid[r][c]='0';
        dfs(r+1,c,grid);
        dfs(r-1,c,grid);
        dfs(r,c+1,grid);
        dfs(r,c-1,grid);
    }
    
    int numIslands(vector<vector<char>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
        int ans=0;        
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(grid[i][j]=='1')
                {
                    ans++;
                    dfs(i,j,grid);
                }
            }
        }
        return ans;
    }
};
