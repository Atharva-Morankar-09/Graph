
GFG - https://practice.geeksforgeeks.org/problems/rotten-oranges2536/1

class Solution 
{
    public:
    //Function to find minimum time required to rot all oranges. 
    int orangesRotting(vector<vector<int>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
        queue<pair<int,int>> q;
        int tot=0,cnt=0,ans=0;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(grid[i][j]!=0)
                {
                    tot++;
                }
                if(grid[i][j]==2)
                {
                    q.push({i,j});
                    cnt++;
                }
            }
        }
        
        int x[4]={1,0,-1,0};
        int y[4]={0,1,0,-1};
        
        while(!q.empty())
        {
            int s=q.size();
            while(s--)
            {
                int r=q.front().first;
                int c=q.front().second;
                q.pop();
                for(int i=0;i<4;i++)
                {
                    int newr = r + x[i];
                    int newc = c + y[i];
                    if(newr>=0 && newc>=0 && newr<n && newc<m && grid[newr][newc]==1)
                    {
                        grid[newr][newc]=2;
                        q.push({newr,newc});
                        cnt++;
                    }
                }
            }
            if(!q.empty())
            {ans++;}
        }
        
      return tot==cnt?ans:-1;
    }
};
