class Solution
{
	public:
	//Function to find number of strongly connected components in the graph.
    void dfs(int curr, vector<int>& vis, vector<int> adj[], stack<int>& st)
	{
	    vis[curr]=1;
	    for(auto it:adj[curr])
	    {
	        if(vis[it]==0)
	        {
	            dfs(it,vis,adj,st);
	        }
	    }
	   st.push(curr); 
	}
	
	void revDfs(int curr, vector<int> transpose[], vector<int>& vis)
	{
	    vis[curr]=1;
	    for(auto it:transpose[curr])
	    {
	        if(vis[it]==0)
	        {
	            revDfs(it,transpose,vis);
	        }
	    }
	   
	}
	
	//Function to find number of strongly connected components in the graph.
    int kosaraju(int V, vector<int> adj[])
    {
        stack<int> st;
        vector<int> vis(V+1,0);
        for(int i=0;i<V;i++)
        {
            if(vis[i]==0)
            {
                dfs(i,vis,adj,st);
            }
        }
        
        vector<int> transpose[V+1];
        
        for(int i=0;i<V;i++)
        {
            vis[i]=0;
            for(auto it:adj[i])
            {
                transpose[it].push_back(i);
            }
        }
        
        int ans=0;
        
        while(!st.empty())
        {
            int curr=st.top();
            st.pop();
            if(vis[curr]==0)
            {
                revDfs(curr,transpose,vis);
                ans++;
            }
        }
      return ans;  
    }  
};
